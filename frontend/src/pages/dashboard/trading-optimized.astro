---
/**
 * @fileoverview Optimized Trading Dashboard with Lazy Loading
 * @description Example implementation of performance optimizations
 * @version 1.0.0
 *
 * OPTIMIZATIONS:
 * - ✅ Lazy loading with client directives
 * - ✅ Web Worker for chart data processing
 * - ✅ Code splitting via dynamic imports
 * - ✅ Preloading critical resources
 */

import Layout from '../../layouts/Layout.astro';
import { getChartWorker } from '../../lib/chart-worker-manager';

// Static imports (critical, above the fold)
import ProfileCard from '../../components/dashboard/ProfileCard';
import LogoutButton from '../../components/dashboard/LogoutButton';

// Dynamic imports will be used for below-the-fold components
---

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard - BotCriptoFy2</title>

    <!-- Preload critical resources -->
    <link rel="preload" href="/fonts/inter.woff2" as="font" type="font/woff2" crossorigin />
    <link rel="preconnect" href="https://api.binance.com" />
    <link rel="dns-prefetch" href="https://stream.binance.com" />

    <!-- Service Worker Registration -->
    <script>
      import { registerServiceWorker } from '../../lib/service-worker-register';

      if ('serviceWorker' in navigator) {
        registerServiceWorker();
      }
    </script>
  </head>

  <body class="bg-black text-white min-h-screen">
    <div class="container mx-auto px-4 py-8">

      <!-- ========================================
           ABOVE THE FOLD - Eager Loading
           ======================================== -->
      <header class="mb-8">
        <div class="flex items-center justify-between">
          <h1 class="text-4xl font-bold">Dashboard</h1>
          <LogoutButton client:load />
        </div>
      </header>

      <!-- Profile Card - Load immediately -->
      <section class="mb-8">
        <ProfileCard client:load />
      </section>

      <!-- ========================================
           BELOW THE FOLD - Lazy Loading
           ======================================== -->

      <!-- Trading Chart - Load when visible -->
      <section class="mb-8">
        <div class="bg-gray-900/50 border border-gray-800 rounded-xl p-6">
          <h2 class="text-2xl font-bold mb-4">Live Trading Chart</h2>

          <!--
            client:visible - Load when component enters viewport
            This saves ~500KB+ of JavaScript until user scrolls
          -->
          <div id="chart-container">
            <div class="text-center py-8">
              <div class="inline-block w-8 h-8 border-4 border-cyan-500/30 border-t-cyan-500 rounded-full animate-spin"></div>
              <p class="text-gray-400 mt-2">Carregando gráfico...</p>
            </div>
          </div>
        </div>
      </section>

      <!-- Stats Cards - Load when idle -->
      <section class="mb-8">
        <!--
          client:idle - Load when browser is idle
          Non-critical content, loads after main thread is free
        -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4" data-component="stats-cards">
          <div class="bg-gray-900/50 border border-gray-800 rounded-xl p-6">
            <h3 class="text-sm text-gray-400 mb-2">Total Balance</h3>
            <p class="text-3xl font-bold">$12,458.32</p>
            <p class="text-green-400 text-sm mt-1">+5.2% Today</p>
          </div>
          <div class="bg-gray-900/50 border border-gray-800 rounded-xl p-6">
            <h3 class="text-sm text-gray-400 mb-2">Active Bots</h3>
            <p class="text-3xl font-bold">3</p>
            <p class="text-cyan-400 text-sm mt-1">Running</p>
          </div>
          <div class="bg-gray-900/50 border border-gray-800 rounded-xl p-6">
            <h3 class="text-sm text-gray-400 mb-2">24h Profit</h3>
            <p class="text-3xl font-bold">$327.12</p>
            <p class="text-green-400 text-sm mt-1">+2.7%</p>
          </div>
        </div>
      </section>

      <!-- Trading History - Load on interaction -->
      <section class="mb-8">
        <!--
          client:media - Load based on media query
          For large screens only
        -->
        <div class="bg-gray-900/50 border border-gray-800 rounded-xl p-6" data-component="trading-history">
          <h2 class="text-2xl font-bold mb-4">Recent Trades</h2>
          <div class="space-y-2">
            <p class="text-gray-400">Loading...</p>
          </div>
        </div>
      </section>

    </div>

    <!-- ========================================
         DYNAMIC CHART LOADING WITH WEB WORKER
         ======================================== -->
    <script>
      // Dynamic import - only loads when needed
      async function loadTradingChart() {
        try {
          // Import TradingChart component dynamically
          const { TradingChart } = await import('../../components/charts/TradingChart');

          // Initialize Web Worker for data processing
          const worker = getChartWorker();
          await worker.initialize();

          // Render chart
          const container = document.getElementById('chart-container');
          if (container) {
            const chart = new TradingChart({
              symbol: 'BTC/USDT',
              interval: '1m',
              height: 500,
            });

            // Mount to DOM (pseudo-code - actual implementation depends on framework)
            // container.innerHTML = '';
            // container.appendChild(chart.render());
          }
        } catch (error) {
          console.error('Failed to load trading chart:', error);
        }
      }

      // Intersection Observer for lazy loading
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            loadTradingChart();
            observer.disconnect();
          }
        });
      }, {
        rootMargin: '100px' // Start loading 100px before entering viewport
      });

      // Observe chart container
      const chartContainer = document.getElementById('chart-container');
      if (chartContainer) {
        observer.observe(chartContainer);
      }

      // Prefetch trading history component on hover
      const historySection = document.querySelector('[data-component="trading-history"]');
      if (historySection) {
        historySection.addEventListener('mouseenter', () => {
          import('../../components/dashboard/TradingHistory');
        }, { once: true });
      }
    </script>

    <!-- Performance monitoring -->
    <script>
      // Log Core Web Vitals
      if ('web-vital' in window) {
        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
          getCLS(console.log);
          getFID(console.log);
          getFCP(console.log);
          getLCP(console.log);
          getTTFB(console.log);
        });
      }
    </script>
  </body>
</html>
